# Dual  Transforms
Affine:
  transform: DualBATransform
  albumentations:
    function: A.Affine
  imgaug:
    function: iaa.Affine   # or iaa.pillike.Affine
    default_lib_paras:
      mode: reflect
      order: cv2.INTER_LINEAR
      scale:
      - 1
      - 1
      translate_px:
      - 0
      - 0
    paras_alb2lib:
      mode:
      - border_mode
      - _AFFINE_MODE_CV2_TO_SKIMAGE[x]
      order:
      - interpolation
      - x
  keras:
    function: keras.apply_affine_transform
    paras_alb2lib:
      theta:
      - rotate
      - '-random_uniform(x) '
    default_lib_paras:
      fill_mode: reflect
      order: 4


  torchvision:
    default_lib_paras:
      degrees: 0
      interpolation: torch_f.InterpolationMode.BILINEAR
      shear: 0
    function: torch.RandomAffine
    paras_alb2lib:
      degrees:
      - rotate
      - -x
      fill:
      - cval
      - x

PiecewiseAffine:
  transform: DualBATransform
  imgaug:
    function: iaa.PiecewiseAffine
  albumentations:
    function: A.PiecewiseAffine

Cutout:
  transform: ImageOnlyBATransform
  default_para:
    num_holes: 8
  albumentations:
    function: A.Cutout
    default_lib_paras:
      max_h_size: 64
      max_w_size: 64
  imgaug:
    function: iaa.Cutout
    paras_alb2lib:
      nb_iterations:
      - num_holes
      - x
  torchvision:
    function: torch.RandomErasing

Crop:
  transform: DualBATransform
  imgaug:
    function: iaa.Crop
  augly:
    function: augly.Crop

RandomCrop:
  transform: DualBATransform
  default_para:
    height: 64
    width: 64
  albumentations:
    function: A.RandomCrop
  imgaug:
    function: iaa.CropToFixedSize
  torchvision:
    function: torch.RandomCrop
    paras_alb2lib:
      size:
      - height,width
      - x 
  mmcv:
    function: mmcv.RandomCrop
    paras_alb2lib:
      crop_size:
      - height,width
      - x 

CenterCrop:
  transform: DualBATransform
  albumentations:
    function: A.CenterCrop
  default_para:
    height: 64
    width: 64
  torchvision:
    function: torch.CenterCrop
    paras_alb2lib:
      size:
      - height,width
      - x 


RandomSizedCrop:
  transform: DualBATransform
  albumentations:
    function: A.RandomSizedCrop
  default_para:
    height: 64
    width: 64
    min_max_height:
      - 64
      - 64
  torchvision:
    function: torch.RandomSizedCrop
    paras_alb2lib:
      size:
      - height,width
      - x 
    default_lib_paras:
      size: 
        - 64
        - 64

RandomResizedCrop:
  transform: DualBATransform
  albumentations:
    function: A.RandomResizedCrop
  default_para:
    height: 64
    width: 64
    min_max_height:
      - 64
      - 64
  torchvision:
    function: torch.RandomResizedCrop
    paras_alb2lib:
      size:
      - height,width
      - x 
    default_lib_paras:
      size: 
        - 64
        - 64

Resize:
  transform: DualBATransform
  albumentations:
    function: A.Resize
  default_para:
    height: 64
    width: 64
    interpolation: cv2.INTER_AREA  # set default to anti-alising option
  imgaug:
    function: iaa.Resize
    default_lib_paras:
      interpolation: "area"   
    paras_alb2lib:
      size:
      - height,width
      - x 
  torchvision:
    function: torch.Resize
    paras_alb2lib:
      size:
      - height,width
      - x 
  augly:
    function: augly.Resize
  mmcv:
    function: mmcv.Resize
    paras_alb2lib:
      img_scale:
      - height,width
      - x 

CropAndPad:
  transform: DualBATransform
  albumentations:
    function: A.CropAndPad
  default_para:
    percent: 0.1
  imgaug:
    function: iaa.CropAndPad


Rotate:
  transform: DualBATransform
  albumentations:
    function: A.Rotate
  default_para:
    limit:
    - -90
    - 90
  imgaug:
    function: iaa.Rotate
    paras_alb2lib:
      cval:
      - value
      - x
      mode:
      - border_mode
      - _AFFINE_MODE_CV2_TO_SKIMAGE[x]
      rotate:
      - limit
      - -(*x)
  keras:
    default_lib_paras:
      channel_axis: 2
    function: keras.apply_affine_transform
    paras_alb2lib:
      cval:
      - value
      - x
      fill_mode:
      - border_mode
      - _CODE_TO_CV2_KERAS_MODE[x]
      theta:
      - limit
      - '-random_uniform(x)'
  torchvision:
    function: torch.RandomRotation
    paras_alb2lib:
      degrees:
      - limit
      - x
      fill:
      - value
      - x
  augly:
    function: augly.RandomRotation
    paras_alb2lib:
      min_degrees:
      - limit
      - x[0]
      max_degrees:
      - limit
      - x[1]
  mmcv:
    function: mmcv.RandomRotate
    paras_alb2lib:
      degree:
      - limit
      - x
    default_lib_paras:
      prob: 1
      
Pad:
  transform: DualBATransform
  imgaug:
    function: iaa.Pad
  torchvision:
    function: torch.Pad
    default_lib_paras:
      padding: 30
  augly:
    function: augly.Pad
  mmcv:
    function: mmcv.Pad
    default_lib_paras:
      size_divisor: 30

Normalize:
  transform: DualBATransform
  albumentations:
    function: A.Normalize
  mmcv:
    function: mmcv.Normalize
    default_lib_paras:
      mean: [125,125,125]
      std: [10,10,10]

HorizontalFlip:
  transform: DualBATransform
  albumentations:
    function: A.HorizontalFlip
  imgaug:
    function: iaa.Fliplr
  keras:
    function: keras.flip_axis
    default_lib_paras:
      axis: 1
  torchvision:
    function: torch.RandomHorizontalFlip
  augly:
    function: augly.HFlip

VerticalFlip:
  transform: DualBATransform
  albumentations:
    function: A.VerticalFlip
  imgaug:
    function: iaa.Flipud
  keras:
    function: keras.flip_axis
    default_lib_paras:
      axis: 0
  torchvision:
    function: torch.RandomVerticalFlip
  augly:
    function: augly.VFlip

ChannelShuffle:
  transform: DualBATransform
  imgaug:
    function: iaa.ChannelShuffle
  albumentations:
    function: A.ChannelShuffle

Lambda:
  transform: DualBATransform
  imgaug:
    function: iaa.Lambda
  torchvision:
    function: torch.Lambda
    default_lib_paras:
      lambd: "lambda x: np.abs(x)"   # input should be lambda / function
  albumentations:
    function: A.Lambda
  augly:
    function: augly.ApplyLambda

# ImageOnly Transforms
Autocontrast:
  transform: ImageOnlyBATransform
  imgaug:
    default_lib_paras:
      cutoff:
      - 10
      - 20
    function: iaa.pillike.Autocontrast
  torchvision:
    function: torch_f.autocontrast

Blur:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.Blur
  augly:
    function: augly.RandomBlur
    paras_alb2lib:
      min_radius:
      - blur_limit
      - x[0]
      max_radius:
      - blur_limit
      - x[1]
  default_para:
    blur_limit:
    - 3
    - 7
  imgaug:
    function: iaa.AverageBlur
    paras_alb2lib:
      k:
      - blur_limit
      - x


MedianBlur:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.MedianBlur
  imgaug:
    function: iaa.MedianBlur

Grayscale:
  transform: DualBATransform
  imgaug:
    function: iaa.Grayscale
  torchvision:
    function: torch.Grayscale
  augly:
    function: augly.Grayscale

Scale:
  transform: DualBATransform
  torchvision:
    function: torch.Scale
    default_lib_paras:
      size: 
        - 64
        - 64
  augly:
    function: augly.Scale

RandomGrayscale:
  transform: DualBATransform
  torchvision:
    function: torch.RandomGrayscale

Equalize:
  transform: DualBATransform
  imgaug:
    function: iaa.pillike.Equalize
  torchvision:
    function: torch.RandomEqualize
  albumentations:
    function: A.Equalize

Brightness:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.RandomBrightness
  default_para:
    limit:
    - -0.2
    - 0.2
  augly:
    function: augly.RandomBrightness
    paras_alb2lib:
      min_factor:
      - limit
      - x[0]
      max_factor:
      - limit
      - x[1]
  imgaug:
    function: iaa.AddToBrightness
    paras_alb2lib:
      add:
      - limit
      - list(MAX_VALUE*np.array(x))
  keras:
    function: keras.apply_brightness_shift
    paras_alb2lib:
      brightness:
      - limit
      - '1+random_uniform(x)'
  torchvision:
    function: torch.ColorJitter
    paras_alb2lib:
      brightness:
      - limit
      - 1+(*x)
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "brightness"
      severity: 1 
    
Contrast:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.RandomContrast
  default_para:
    limit:
    - -0.2
    - 0.2
  imgaug:
    function: iaa.MultiplyBrightness
    paras_alb2lib:
      mul:
      - limit
      - 1+(*x)
  torchvision:
    function: torch.ColorJitter
    paras_alb2lib:
      contrast:
      - limit
      - 1+(*x)
  augly:
    function: augly.Contrast
    paras_alb2lib:
      factor:
      - limit
      - x[1]      # only support single value input: BA.Contract(limit=(0.2,0.2), library = "augly")
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "contrast"
      severity: 1

Emboss:
  transform: DualBATransform
  imgaug:
    function: iaa.Emboss
  albumentations:
    function: A.Emboss
    
CLAHE:
  transform: DualBATransform
  imgaug:
    function: iaa.CLAHE
  albumentations:
    function: A.CLAHE
  mmcv:
    function: mmcv.CLAHE

Invert:
  albumentations:
    function: A.InvertImg
  imgaug:
    function: iaa.Invert
  torchvision:
    function: torch.RandomInvert
  transform: ImageOnlyBATransform

Posterize:
  albumentations:
    function: A.Posterize
  default_para:
    num_bits: 4
  imgaug:
    function: iaa.UniformColorQuantizationToNBits #Posterize
    paras_alb2lib:
      nb_bits:
      - num_bits
      - x
  torchvision:
    function: torch.RandomPosterize
    paras_alb2lib:
      bits:
      - num_bits
      - x
  transform: ImageOnlyBATransform
  
Saturation:
  transform: ImageOnlyBATransform
  albumentations:
    default_lib_paras:
      brightness: 0
      contrast: 0
      hue: 0
    function: A.ColorJitter
  default_para:
    saturation: 0.2
  imgaug:
    function: iaa.MultiplySaturation
    paras_alb2lib:
      mul:
      - saturation
      - x
  torchvision:
    function: torch_f.adjust_saturation
    paras_alb2lib:
      saturation_factor:
      - saturation
      - random_uniform(x)
  augly:
    function: augly.Saturation
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "saturate"
      severity: 1

Sharpen:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.Sharpen
  default_para:
    alpha:
    - 0.2
    - 0.5
    lightness:
    - 0.5
    - 1.0
  imgaug:
    function: iaa.Sharpen
  torchvision:
    function: torch_f.adjust_sharpness
    paras_alb2lib:
      sharpness_factor:
      - alpha
      - 10*random_uniform(x)
  augly:
    function: augly.Sharpen

Solarize:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.Solarize
  default_para:
    threshold: 128
  imgaug:
    function: iaa.Solarize    #     or: iaa.pillike.Solarize
  torchvision:
    function: torch.RandomSolarize
PerspectiveTransform:
  transform: DualBATransform
  augly:
    function: augly.PerspectiveTransform
  imgaug:
    function: iaa.PerspectiveTransform

CoarseDropout:
  transform: DualBATransform
  albumentations:
    function: A.CoarseDropout
  imgaug:
    function: iaa.CoarseDropout

# InterpolationMode:
#   transform: DualBATransform
#   torchvision:
#     function: torch_f.InterpolationMode

# Text
OverlayText:
  transform: DualBATransform
  augly:
    function: augly.OverlayText

# ImageCompression
JpegCompression:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.JpegCompression
  default_para:
    quality_lower: 99
    quality_upper: 100
  imgaug:
    function: iaa.JpegCompression
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "jpeg_compression"
      severity: 1

## ColorJitter
ColorJitter:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.ColorJitter
  default_para:
    brightness: 0.2
    contrast: 0.2
    saturation: 0.2
    hue: 0.2
  torchvision:
    function: torch.ColorJitter
  augly:
    function: augly.ColorJitter
    paras_alb2lib:
      brightness_factor:
      - brightness
      - 1+x
      contrast_factor:
      - contrast
      - 1+x
      saturation_factor:
      - saturation
      - 1+x

Superpixels:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.Superpixels
  imgaug:
    function: iaa.Superpixels

# Imagenet-c Corruptions
GaussianNoise:
  transform: ImageOnlyBATransform
  imgaug:
    function: iaa.AdditiveGaussianNoise
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "gaussian_noise"
      severity: 1

ShotNoise:
  transform: ImageOnlyBATransform
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "shot_noise"
      severity: 1

ImpulseNoise:
  transform: ImageOnlyBATransform
  imgaug:
    function: iaa.ImpulseNoise
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "impulse_noise"
      severity: 1


GlassBlur:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.GlassBlur
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "glass_blur"
      severity: 1

MotionBlur:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.MotionBlur
  imgaug:
    function: iaa.MotionBlur
  imagenet_c:                               
    function: imagenet_c
    default_lib_paras:
      corruption_name: "motion_blur"
      severity: 1

GaussianBlur:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.GaussianBlur
  torchvision:
    function: torch.GaussianBlur
    paras_alb2lib:
      kernel_size:
      - blur_limit
      - x
    default_lib_paras:
      kernel_size: 3
  imgaug:
    function: iaa.GaussianBlur
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "gaussian_blur"
      severity: 1

Snow:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.RandomSnow
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "snow"
      severity: 1

Fog:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.RandomFog
  imgaug:
    function: iaa.Fog
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "fog"
      severity: 1

ElasticTransform:
  transform: ImageOnlyBATransform
  albumentations:
    function: A.ElasticTransform
  imgaug:
    function: iaa.ElasticTransformation
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "elastic_transform"
      severity: 1

Pixelization:
  transform: ImageOnlyBATransform
  augly:
    function: augly.RandomPixelization
  imagenet_c:
    function: imagenet_c
    default_lib_paras:
      corruption_name: "pixelate"
      severity: 1
